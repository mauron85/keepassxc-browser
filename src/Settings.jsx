import React, { Component } from 'react';
import {
  FormattedMessage,
  intlShape,
  defineMessages,
  injectIntl
} from 'react-intl';
import {
  Card,
  CardActions,
  CardHeader,
  CardTitle,
  CardText
} from 'material-ui/Card';
import { List, ListItem } from 'material-ui/List';
import Divider from 'material-ui/Divider';
import Toggle from 'material-ui/Toggle';
import TextField from 'material-ui/TextField';

const messages = defineMessages({
  title: {
    id: 'settings.general.title',
    defaultMessage: 'General'
  },
  customizeShortcuts: {
    id: 'settings.general.customizeShortcuts',
    description: 'Title shown in General Settings Card',
    defaultMessage:
      'You can customize these shortcuts on {configureUrl} page.'
  },
  shortcuts: {
    id: 'settings.shortcuts',
    defaultMessage: 'Shortcuts'
  },
  inserPassword: {
    id: 'settings.shortcuts.inserPassword',
    defaultMessage: 'Insert password only'
  },
  inserPasswordDesc: {
    id: 'settings.shortcuts.inserPasswordDesc',
    defaultMessage: 'Insert only password into the field where your focus is'
  },
  inserUserNamePassword: {
    id: 'settings.shortcuts.inserUserNamePassword',
    defaultMessage: 'Insert username and password'
  },
  inserUserNamePasswordDesc: {
    id: 'settings.shortcuts.inserUserNamePasswordDesc',
    defaultMessage:
      'Insert username and password into the fields where your focus is'
  },
  blinkTime: {
    id: 'settings.general.blinkTime',
    defaultMessage: 'Blink Time [TODO]'
  },
  blinkTimeDesc: {
    id: 'settings.general.blinkTimeDesc',
    defaultMessage:
      'Maximum time (ms) the icon should blink after detecting new credentials'
  },
  passwordGenerator: {
    id: 'settings.general.passwordGenerator',
    defaultMessage: 'Activate password generator'
  },
  passwordGeneratorDesc: {
    id: 'settings.general.passwordGeneratorDesc',
    defaultMessage: `For all password-fields there will be an icon added to generate a new password.
It is generated by KeePassXC with the profile for automatically generated passwords for new entries`
  },
  retrieveCredentials: {
    id: 'settings.general.retrieveCredentials',
    defaultMessage: 'Automatically retrieve credentials'
  },
  retrieveCredentialsDesc: {
    id: 'settings.general.retrieveCredentialsDesc',
    defaultMessage:
      'keepassxc-browser will immediately retrieve the credentials when the tab is activated'
  },
  autoFillInSingle: {
    id: 'settings.general.autoFillInSingle',
    defaultMessage: 'Automatically fill-in single credentials entry'
  },
  autoFillInSingleDesc: {
    id: 'settings.general.autoFillInSingleDesc',
    defaultMessage:
      'If keepassxc-browser does only receive a single entry from KeePassXC it automatically fills this credentials into the found credential fields'
  },
  autoCompleteUsername: {
    id: 'settings.general.autoCompleteUsername',
    defaultMessage: 'Autocomplete username fields.'
  },
  autoCompleteUsernameDesc: {
    id: 'settings.general.autoCompleteUsernameDesc',
    defaultMessage:
      'For all username fields on a page a dropdown list appears which contains all available credentials'
  },
  unsafeOptions: {
    id: 'settings.general.unsafeOptions',
    defaultMessage: 'Unsafe options'
  },
  unsafeOptionsDesc: {
    id: 'settings.general.unsafeOptionsDesc',
    defaultMessage: 'use at your own risk'
  }
});

const styles = {
  shortcut: {
    display: 'flex'
  },
  key: {
    display: 'inline-block',
    padding: 8,
    // minWidth: 20,
    textAlign: 'center',
    fontSize: '12px',
    border: '2px solid #AAA',
    borderRadius: '8px',
    color: '#000',
    backgroundColor: '#CCC'
  },
  keyPlus: {
    lineHeight: '36px',
    marginLeft: 6,
    marginRight: 6
  }
};

function makeShortcut(keys) {
  const totalKeys = keys.length;
  const buttons = keys.map((key, index) => {
    const hasNext = index < totalKeys - 1;
    return (
      <div key={key} style={styles.shortcut}>
        <div style={styles.key}>
          <span>{key}</span>
        </div>
        {hasNext && <span style={styles.keyPlus}>+</span>}
      </div>
    );
  });
  return (
    <div style={{ width: 150 }}>
      <div style={styles.shortcut}>{buttons}</div>
    </div>
  );
}

class Settings extends Component {
  static propTypes = {
    intl: intlShape.isRequired
  };

  constructor(props) {
    super(props);
    this.state = {
      expanded: true
    };

    this.handleChange = this.handleChange.bind(this);
  }

  handleChange() {}

  render() {
    const { expanded, blinkTime } = this.state;
    const { formatMessage } = this.props.intl;

    const blinkTimeTextField = (
      <TextField
        id="blinkTime"
        value={this.state.blinkTime}
        onChange={this.handleChange}
      />
    );

    return (
      <div>
        <div className="header">
          <h2 className="title">
            <FormattedMessage {...messages.shortcuts} />
          </h2>
        </div>
        <Card expanded={expanded}>
          <CardText>
            <List>
              <ListItem
                disabled
                primaryText={formatMessage(messages.inserPassword)}
                secondaryText={formatMessage(messages.inserPasswordDesc)}
                secondaryTextLines={2}
                rightIcon={makeShortcut(['Ctrl', 'Shift', 'P'])}
              />
              <Divider />
              <ListItem
                disabled
                primaryText={formatMessage(messages.inserUserNamePassword)}
                secondaryText={formatMessage(
                  messages.inserUserNamePasswordDesc
                )}
                secondaryTextLines={2}
                rightIcon={makeShortcut(['Ctrl', 'Shift', 'U'])}
              />
            </List>
          </CardText>
          <CardText>
            <FormattedMessage
              {...messages.customizeShortcuts}
              values={{
                configureUrl: (
                  <a href="chrome://extensions/configureCommands">
                    chrome://extensions/configureCommands
                  </a>
                )
              }}
            />
          </CardText>
        </Card>
        <div className="header">
          <h2 className="title"><FormattedMessage {...messages.title} /></h2>
        </div>
        <Card expanded={expanded}>
          <CardText>
            <List>
              <ListItem
                primaryText={formatMessage(messages.blinkTime)}
                secondaryText={formatMessage(messages.blinkTimeDesc)}
                secondaryTextLines={2}
                rightToggle={<Toggle />}
                //nestedItems={[blinkTimeTextField]}
              />
              <Divider />
              <ListItem
                primaryText={formatMessage(messages.passwordGenerator)}
                secondaryText={formatMessage(messages.passwordGeneratorDesc)}
                secondaryTextLines={2}
                rightToggle={<Toggle />}
              />
              <Divider />
              <ListItem
                primaryText={formatMessage(messages.retrieveCredentials)}
                secondaryText={formatMessage(messages.retrieveCredentialsDesc)}
                secondaryTextLines={2}
                rightToggle={<Toggle />}
              />
              <Divider />
              <ListItem
                secondaryTextLines={2}
                primaryText={formatMessage(messages.autoCompleteUsername)}
                secondaryText={formatMessage(messages.autoCompleteUsernameDesc)}
                rightToggle={<Toggle />}
              />
              <Divider />
              <ListItem
                primaryText={formatMessage(messages.autoCompleteUsername)}
                secondaryText={formatMessage(messages.autoCompleteUsernameDesc)}
                secondaryTextLines={2}
                rightToggle={<Toggle />}
              />
            </List>
          </CardText>
        </Card>
        <div className="header">
          <h2 className="title">
            <FormattedMessage {...messages.unsafeOptions} />&nbsp;
            <FormattedMessage {...messages.unsafeOptionsDesc} />
          </h2>
        </div>
        <Card>
          <CardText>
            <List>
              <ListItem
                primaryText={formatMessage(messages.autoFillInSingle)}
                secondaryText={formatMessage(messages.autoFillInSingleDesc)}
                secondaryTextLines={2}
                rightToggle={<Toggle />}
              />
            </List>
          </CardText>
        </Card>
      </div>
    );
  }
}

export default injectIntl(Settings);
