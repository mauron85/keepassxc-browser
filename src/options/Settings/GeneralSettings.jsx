import React from 'react';
import PropTypes from 'prop-types';
import {
  FormattedMessage,
  intlShape,
  defineMessages,
  injectIntl
} from 'react-intl';
import { List, ListItem } from 'material-ui/List';
import Divider from 'material-ui/Divider';
import Toggle from 'material-ui/Toggle';
import TextField from 'material-ui/TextField';
import ToggeableListItem from './components/ToggeableListItem';

const messages = defineMessages({
  title: {
    id: 'settings.general.title',
    defaultMessage: 'General'
  },
  blinkTime: {
    id: 'settings.general.blinkTime',
    defaultMessage: 'Blink Time'
  },
  blinkTimeDesc: {
    id: 'settings.general.blinkTimeDesc',
    defaultMessage:
      'Maximum time (ms) the icon should blink after detecting new credentials'
  },
  redirectOffset: {
    id: 'settings.general.redirectOffset',
    defaultMessage: 'Redirect offset'
  },
  redirectOffsetDesc: {
    id: 'settings.general.redirectOffsetDesc',
    defaultMessage: `What is the minimum time (ms) the icon should blink before deactivating due to page redirects. 
-1 to only use Blink Time ignoring Redirect Allowance (old behavior) 
Default: -1, Recommended: 2000`
  },
  redirectAllowance: {
    id: 'settings.general.redirectAllowance',
    defaultMessage: 'Redirect Allowance'
  },
  redirectAllowanceDesc: {
    id: 'settings.general.redirectAllowanceDesc',
    defaultMessage: `How many pages should the tab cycle through after the redirect offset before deactivating the icon 
Default: 1`
  },
  passwordGenerator: {
    id: 'settings.general.passwordGenerator',
    defaultMessage: 'Activate password generator'
  },
  passwordGeneratorDesc: {
    id: 'settings.general.passwordGeneratorDesc',
    defaultMessage: `For all password-fields there will be an icon added to generate a new password.
It is generated by KeePassXC with the profile for automatically generated passwords for new entries`
  },
  retrieveCredentials: {
    id: 'settings.general.retrieveCredentials',
    defaultMessage: 'Automatically retrieve credentials'
  },
  retrieveCredentialsDesc: {
    id: 'settings.general.retrieveCredentialsDesc',
    defaultMessage:
      'keepassxc-browser will immediately retrieve the credentials when the tab is activated'
  },
  autoCompleteUsername: {
    id: 'settings.general.autoCompleteUsername',
    defaultMessage: 'Autocomplete username fields'
  },
  autoCompleteUsernameDesc: {
    id: 'settings.general.autoCompleteUsernameDesc',
    defaultMessage:
      'For all username fields on a page a dropdown list appears which contains all available credentials'
  },
  autoFillHttpAuthDialogs: {
    id: 'settings.general.autoFillHttpAuthDialogs',
    defaultMessage: 'Auto fill HTTP Auth dialogs and send them'
  },
  autoFillHttpAuthDialogsDesc: {
    id: 'settings.general.autoFillHttpAuthDialogsDesc',
    defaultMessage:
      'If credentials are found for a page and the login-type is an HTTP Auth request, keepassxc-browser tries to login with the first given credentials'
  }
});

const styles = {
  listInput: {
    marginLeft: 25
  }
};

const GeneralSettings = ({ intl, ...props }) => {
  const {
    blinkTimeout,
    blinkMinTimeout,
    allowedRedirect,
    usePasswordGenerator,
    autoRetrieveCredentials,
    autoCompleteUsernames,
    autoFillAndSend,
    defaults,
    onChange
  } = props;
  const { formatMessage } = intl;

  const handleToogle = (event, value) => {
    const name = event.target.name;
    switch (name) {
      case 'blinkMinTimeout':
        onChange(name, value ? defaults[name] : -1);
        break;
      default:
        onChange(name, value ? defaults[name] : 0);
    }
  };

  const handleChange = (event, value) => {
    onChange(event.target.name, value);
  };

  return (
    <div>
      <List>
        <ToggeableListItem
          primaryText={formatMessage(messages.blinkTime)}
          secondaryText={formatMessage(messages.blinkTimeDesc)}
          secondaryTextLines={2}
          toggleName="blinkTimeout"
          toggled={blinkTimeout > 0}
          onToggle={handleToogle}
        >
          <div style={styles.listInput}>
            <TextField
              name="blinkTimeout"
              type="number"
              value={blinkTimeout}
              onChange={handleChange}
            />
          </div>
        </ToggeableListItem>
        <Divider />
        <ToggeableListItem
          primaryText={formatMessage(messages.redirectOffset)}
          secondaryText={formatMessage(messages.redirectOffsetDesc)}
          secondaryTextLines={2}
          toggleName="blinkMinTimeout"
          toggled={blinkMinTimeout > -1}
          onToggle={handleToogle}
        >
          <div style={styles.listInput}>
            <TextField
              name="blinkMinTimeout"
              type="number"
              value={blinkMinTimeout}
              onChange={handleChange}
            />
          </div>
        </ToggeableListItem>
        <Divider />
        <ToggeableListItem
          primaryText={formatMessage(messages.redirectAllowance)}
          secondaryText={formatMessage(messages.redirectAllowanceDesc)}
          secondaryTextLines={2}
          toggleName="allowedRedirect"
          toggled={allowedRedirect > 0}
          onToggle={handleToogle}
        >
          <div style={styles.listInput}>
            <TextField
              name="allowedRedirect"
              type="number"
              value={allowedRedirect}
              onChange={handleChange}
            />
          </div>
        </ToggeableListItem>
        <Divider />
        <ListItem
          primaryText={formatMessage(messages.passwordGenerator)}
          secondaryText={formatMessage(messages.passwordGeneratorDesc)}
          secondaryTextLines={2}
          rightToggle={
            <Toggle
              name="usePasswordGenerator"
              toggled={usePasswordGenerator}
              onToggle={handleChange}
            />
          }
        />
        <Divider />
        <ListItem
          primaryText={formatMessage(messages.retrieveCredentials)}
          secondaryText={formatMessage(messages.retrieveCredentialsDesc)}
          secondaryTextLines={2}
          rightToggle={
            <Toggle
              name="autoRetrieveCredentials"
              toggled={autoRetrieveCredentials}
              onToggle={handleChange}
            />
          }
        />
        <Divider />
        <ListItem
          secondaryTextLines={2}
          primaryText={formatMessage(messages.autoCompleteUsername)}
          secondaryText={formatMessage(messages.autoCompleteUsernameDesc)}
          rightToggle={
            <Toggle
              name="autoCompleteUsernames"
              toggled={autoCompleteUsernames}
              onToggle={handleChange}
            />
          }
        />
        <Divider />
        <ListItem
          primaryText={formatMessage(messages.autoFillHttpAuthDialogs)}
          secondaryText={formatMessage(messages.autoFillHttpAuthDialogsDesc)}
          secondaryTextLines={2}
          rightToggle={
            <Toggle
              name="autoFillAndSend"
              toggled={autoFillAndSend}
              onToggle={handleChange}
            />
          }
        />
      </List>
    </div>
  );
};

GeneralSettings.propTypes = {
  intl: intlShape.isRequired,
  blinkTimeout: PropTypes.number.isRequired,
  blinkMinTimeout: PropTypes.number.isRequired,
  allowedRedirect: PropTypes.number.isRequired,
  usePasswordGenerator: PropTypes.bool.isRequired,
  autoRetrieveCredentials: PropTypes.bool.isRequired,
  autoFillSingleEntry: PropTypes.bool.isRequired,
  autoCompleteUsernames: PropTypes.bool.isRequired,
  autoFillAndSend: PropTypes.bool.isRequired,
  onSettingChange: PropTypes.func.isRequired,
  onChange: PropTypes.func.isRequired
};

export default injectIntl(GeneralSettings);
